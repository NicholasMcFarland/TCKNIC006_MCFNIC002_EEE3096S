/*
 * assembly.s
 *
 */
 
 @ DO NOT EDIT
	.syntax unified
    .text
    .global ASM_Main
    .thumb_func

@ DO NOT EDIT
vectors:
	.word 0x20002000
	.word ASM_Main + 1

@ DO NOT EDIT label ASM_Main
ASM_Main:

	@ Some code is given below for you to start with
	LDR R0, RCC_BASE  		@ Enable clock for GPIOA and B by setting bit 17 and 18 in RCC_AHBENR
	LDR R1, [R0, #0x14]
	LDR R2, AHBENR_GPIOAB	@ AHBENR_GPIOAB is defined under LITERALS at the end of the code
	ORRS R1, R1, R2
	STR R1, [R0, #0x14]

	LDR R0, GPIOA_BASE		@ Enable pull-up resistors for pushbuttons
	MOVS R1, #0b01010101
	STR R1, [R0, #0x0C]
	LDR R1, GPIOB_BASE  	@ Set pins connected to LEDs to outputs
	LDR R2, MODER_OUTPUT
	STR R2, [R1, #0]
	MOVS R2, #0         	@ NOTE: R2 will be dedicated to holding the value on the LEDs

@ TODO: Add code, labels and logic for button checks and LED patterns
main_loop:
    LDR R3, [R0, #0x10]      @ Read GPIOA input register

    B default

default:
	STR R2, [R1, #0x14]      @ Write the current LED pattern to GPIOB ODR
	BL delay_07s             @ Call delay function for 0.7 seconds
	ADDS R2, R2, #1          @ Increment the LED count by 1 (binary count)
	@ Check if R2 has reached the maximum binary count
	CMP R2, #0b11111111     @ Compare with LED7 (0x80)
	BGT reset_leds           @ If greater than LED7, reset the LEDs

	B main_loop

@ TODO: Add your own values for these delays

delay_07s:
    LDR R3, DELAY_COUNT_07S   @ Load the delay count value from memory
	B delay_loop
delay_03s:
	LDR R3, DELAY_COUNT_03S
	B delay_loop
delay_loop:
    SUBS R3, R3, #1          @ Decrement delay counter
    BNE delay_loop           @ If not zero, continue loop
    BX LR                    @ Return from delay

@ LITERALS; DO NOT EDIT
	.align
RCC_BASE: 			.word 0x40021000
AHBENR_GPIOAB: 		.word 0b1100000000000000000
GPIOA_BASE:  		.word 0x48000000
GPIOB_BASE:  		.word 0x48000400
MODER_OUTPUT: 		.word 0x5555

DELAY_COUNT_07S:  	.word 1000000            @ Approximate delay count for 0.7 second
DELAY_COUNT_03S:	.word 300000             @ 0.3 second

